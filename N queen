#define N 4
#include<stdio.h>
#include <stdbool.h>
int count=0;
void printSolution(int board[N][N])
{count++;
	for (int i = 0; i < N; i++) 
	{count++;
		for (int j = 0; j < N; j++)
			printf(" %d ", board[i][j]);
		printf("\n");
	}count++;
}
bool isSafe(int board[N][N], int row, int col)
{
	int i, j;
	count++;
	for (i = 0; i < col; i++)
		if (board[row][i])
			return false;
			count++;
	for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
		if (board[i][j])
			return false;
			count++;
	for (i = row, j = col; j >= 0 && i < N; i++, j--)
		if (board[i][j])
			return false;
			count++;
	return true;
	count++;
}
bool solveNQUtil(int board[N][N], int col)
{
	if (col >= N)
		return true;
		count++;
	for (int i = 0; i < N; i++)
	 {count++;
		if (isSafe(board,i,col)) 
		{
			board[i][col] = 1;
			count++;
			if (solveNQUtil(board, col + 1))
				return true;
				count++;
			board[i][col] = 0;
			count++;
		}count++;
	}count++;
	return false;
}
bool solveNQ()
{
	int board[N][N] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };
						count++;
	if (solveNQUtil(board, 0) == false) 
	{
		printf("Solution does not exist");
		return false;
		count++;
	}
	printSolution(board);
	printf("count=%d",count);
	return true;
}
int main()
{
	solveNQ();
	return 0;
}
