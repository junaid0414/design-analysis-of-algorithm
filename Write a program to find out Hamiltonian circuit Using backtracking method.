#include<stdio.h>
#include<stdlib.h>
#define V 5
int count=0;
void printSolution(int path[]);
int isSafe(int v, int graph[V][V], int path[], int pos)
{count++;
    if (graph[path[pos - 1]][v] == 0)
        return 0;
        count++;
    int i;
    for (i = 0; i < pos; i++)
        if (path[i] == v)
            return 0;
    return 1;
}
int hamCycleUtil(int graph[V][V], int path[], int pos) {
    if (pos == V) {
        if (graph[path[pos - 1]][path[0]] == 1)
            return 1;
        else
            return 0;
    }
    int v;
    for (v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;
            count++;
            if (hamCycleUtil(graph, path, pos + 1) == 1)
                return 1;
            path[pos] = -1;
            count++;
        }
    }
    return 0;
}
int hamCycle(int graph[V][V]) {
    int *path = new int[V];
    count++;
    int i;
    for (i = 0; i < V; i++)
        path[i] = -1;
        count++;
    path[0] = 0;
    count++;
    if (hamCycleUtil(graph, path, 1) == 0) {
        printf("\nSolution does not exist");
        return 0;
    }
    printSolution(path);
    return 1;
}
void printSolution(int path[]) {
    printf("Solution Exists:"
        " Following is one Hamiltonian Cycle \n");
    int i;
    for (i = 0; i < V; i++)
        printf(" %d ", path[i]);
    printf(" %d ", path[0]);
    printf("\n");
}
int main() {
    int graph1[V][V] = { { 0, 1, 0, 1, 0 }, { 1, 0, 1, 1, 1 },
            { 0, 1, 0, 0, 1 }, { 1, 1, 0, 0, 1 }, { 0, 1, 1, 1, 0 }, };
            count++;
    hamCycle(graph1);
    count++;
    int graph2[V][V] = { { 0, 1, 0, 1, 0 }, { 1, 0, 1, 1, 1 },
            { 0, 1, 0, 0, 1 }, { 1, 1, 0, 0, 0 }, { 0, 1, 1, 0, 0 }, };
            count++;
    hamCycle(graph2);
    count++;
    printf("\ncount=%d",count);
    return 0;
}
